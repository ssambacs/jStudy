# day 10

함수(Method, Function)
--> 한가지 작업을 실행하기 위해 만들어진 가장 작은 단위의 프로그램이다.

	프로그램이란?
	이런 함수들이 모여서 원하는 목적ㅇ르 이루도록 구성하는 것.
	
	예
		chatAt()
		==> 문자열 중에서 특정위치의 문자를 알려주는 작업을 하는 함수
		
		random()
		--> 난수 하나를 발생시키는 작업을 실행하기 위해 만들어진 함수
		
	***	
	참고
		1. 함수는 누군가 호출해야 실행된다.
			즉, 스스로 실행되는 경우는 없다.
			
		2. 함수는 실행이 완료되면 자신을 호출한 곳으로 실행순서를 넘긴다.
		
		예
			
			class test {
				void abc(){
					1)
				}
				public static void main(String[] args){ //jvm에 의해서 자동 호출(실행)
					2)
					xyz();
					3)
				}
				
				void xyz(){
					4)
					abc();
					5)
				}
			}
			
			실행순서:
				2) --> 4) --> 1) --> 5) --> 3) 
				
------------------------------------------------------------------------------------------------

함수 만드는 방법
	--> 함수를 정의 할 때는 반드시 클래스 블럭 바로아래에서 만들어야 한다.
		자바에서는 함수 내부에서 함수를 다시 정의하는 경우는 없다.
		반드시 클래스 블럭에서 정의(코딩) 되어야 한다.
		이때 위치는 상관없다.

	형식 
		
		[접근지정자]	[속성]	반환값타입	함수이름(매개변수리스트){
			이 함수가 해야할 목적을 달성하기 위한 내용.....
		}
		
		참고
			1.함수이름
				--> 개발자가 지정하는 사용자 정의어
				
			2. 매개변수리슽
				--> 변수선언 형태로 기술한다.
					갯수는 상관이 없다.
					
				예
					1) 정수 두수를 더한값을 반환해주는 함수
					
						int add(int a, int b){
							return (a + b);
						}
					2) 정수 세 수를 더한값을 반환해주는 함수
						
						int add(int a, int b, int c){
							return (a + b + c);
						}				
							
					이처럼 함수가 하는 기능에 따라서 입력받아야 할 데이터 갯수가 달라질 수 있다.
					따라서 입력 받아야 할 갯수에 따라서 매개변수의 갯수가 달라질 것이다.
						
			3. 반환값타입
				--> 함수는 한가지 목적을 달성하기 위한 가장 단위의 프로그램이다.
					--> 함수를 실행한다는 것은 그 목적을 달성해야 한다는 것과 같다
					 	이떄 그 달성된 목적에 따라 결과가 존재해야 할 것이다.
					 	
				반환값타입이란
				이처럼 함수에게 뭔가 일을 시켰을 때
				그 함수가 일을 한 결과를 알려주는 것이 된다.
				--> 이 결과는 경우에 따라서 달라지게 된다.
				결과는 존재하는 결과값은 경우에 따라서 달라지므로...
				단순히 결과값의 데이터 종류만 선언하면 된다.
				
				예
					charAt()
						--> 이 함수의 결과는 문자로 알려주므로
							따라서 반환값은 char로 되어야 한다.
							
				참고
					함수는 반드시 결과값이 있는 것이 아니다.
					예를 들자면
					뭔가를 출력하는 기능만 담당하는 함수의 경우는
					이 함수는 출력을 하면 이 함수의 목적은 달성된 것이다.
					따라서 결과물은 없게 되는 것이다.
					
					이런 경우에는 반환값타입에 아무것도 안써도 되는 것이 아니고
					반드시
						void
					라고 써줘야 한다.
					
		*****
		참고
			함수는 가장 작은 한가지 목적을 위해 만들어지는
			가장 작은 단위의 프로그램이다.
			따라서 반환값은
			*****
			"한개이거나 없을 수 있다."
			반환값이 2개 이상이 되는 함수는 절대로 존재하지 않는다.
			
			예
				
				int, char cde(){} --> x : 반환값이 두가지인 경우는 존재하지 않는다.
				
				같은 타입의 데이터의 경우도 반환값은 한개만 반환할 수 있다.
				
		참고
			같은 타입의 데이터를 여러개를 반환해줘야 하는 경우는
			배열에 담아서 배열을 반환해주면 된다.
			
	결론
		함수는 4가지 형태를 벗어나지 않는다.
		
			1. void abc(){}
				
			2. int abc(){}
			
			3. void abc(int a){}
			
			4. int abc(int a){}
			
		return 의 의미
		 --> 함수 안에서 사용할 수 있는 명령
		 	
		 	의미
		 		1. 함수 실행을 종료하세요.
		 		
		 		2. 결과가 있는 경우 결과를 반환하고 종료하세요.
		 		
		 	형식 1
		 		return;
		 		
		 	형식2
		 		return 데이터;
		 		
		 	참고
		 		반환값이 void인 경우는 반드시 return 만 사용해야 한다.
		 		반환값이 void가 아닌 경우는
		 			반드시 return 데이터; 사용해야 한다.
		 			
		 	참고
		 		반환값이 void 인 경우는
		 		return 명령을 생략해도 된다.
		 		--> 함수의 블럭을 마치는 순간 자동 종료된다.
		 		하지만 void 가 아닌 경우는 반드시 return 데이터; 를 기술해야 한다.
		 		
--------------------------------------------------------------------------------------------------

함수 사용법
--> 함수는 반드시 호출해야만 사용할 수 있다.
	함수를 사용한다는 개념은 함수를 호출한다는 의미이다.
	
	형식
		함수이름(데이터,.....);
		
		데이터란?
			함수는 그 함수가 실행하기 위해 필요한 데이터를 받을 준비를 하고 있다.(매개변수리스트 : Argument(Parameter))
			따라서 그 함수에게 일을 시키기 위해서는
			필요한 데이터를 반드시 알려줘야 한다.
			--> 결론적으로 데이터(Parameter)란?
				함수가 준비하고 있는 매개변수 리스트에 기억할 데이터를 제공하는 것.
				
			--> 따라서
				데이터는 그 함수가 준비한 매개변수의 갯수와 반드시 일치해야 하고(넘쳐도 안되고 모자라도 안된다.)
				그 형태 역시 일치해야 한다.
				
			예
			
				void abc(int a){}
				
				==> 
					abc();		--> x 	: 입력데이터 갯수가 모자라다
					abc(5);		--> o
					abc(5, 2);	--> x	: 입력데이터 갯수가 넘친다. 
					abc(5.0);	--> x	: 입력데이터의 형태가 다르다.
			
				참고
					
					void abc(float a){}
					
					abc(5); 	--> o	: 이 경우는 정수가 실수로 자동 변환되어서 매개변수에 기억된다.
						--> float a = 5;		
	
--------------------------------------------------------------------------------------------------------------------------------

반환값 사용 방법
--> 함수의 실행이 종료되면 반환값을 줄 수 있다.
	이 반환값은 함수 호출 부분에 그대로 들어온다.
	
	따라서 함수 호출 부분에 예상되는 반환값을 기록해 ㅂ고
	문법적으로 이사잉 없으면 그것이 반환값의 사용이 된다.
	
	int abc(){}
		int k = 7;
		return k;		5라고 가정...
		
		System.out.println("******");
	}
	
	void xyz(int a){....}
	
	int lmn(int a){
		...
		return ???;
	}	 		
	
	abc();						--> o
	int a = abc()				--> o
	System.out.println(abc());	--> o
	xyz(abc());					--> o
	abc(imn(5));				--> x
	
	참고
		반환값이 있는 함수라도
		필요하지 않는 다면 반환값을 이용하지 않아도 상관이 없다.
		