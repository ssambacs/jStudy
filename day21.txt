# day21

스트림(Stream)
--> 자바는 외부장치와 데이터를 주고 받는 방법을 하나의 방법으로 통일시켜 놓았다.
	그것이 바로 Stream 이다.
	
	스트림은 빨대로 생각하면 정확한 원리가 이해된다.
	
	즉, 스트림을 데이터를 주고 받을 외부장치에 꽂기만 하고
	나는 빨대를 빨기만 하면(같은 함수를 이용하면)
	외부장치의 데이터가 들어온다. 라는 개념이다.
	
	참고
		스트림은 단방향이다.
		즉, 하나의 스트림은 한방향으로만 데이터를 보낼 수 있다.
		만약 같은 외부장치에 데이터를 주기도 하고 받기도 하고자 하면
		스트림이 두개가 필요하다.
		
	스트림의 종류(방향성)
		1. 프로그램으로 데이터가 들어오는 방향
			InputStream, Reader
			
		2. 프로그램에서 데이터가 나가는 방향
			 OutputStream, Writer
		
	스트림의 종류(데이터의 양(타입))
		1. byte 단위(1byte)
			InputStream, OutputStream
			--> 속도는 조금 느리다.
				기계어 처리도 가능하다.
				
		2. char 단위(2byte)
			Reader, Wirter
			--> 속도는 조금 더 빠르다.
				오직 문자처리만 가능하다.
				
		참고
			byte가 char로 합쳐지는 순간 운영체제에 따라서 비트 순서가 바뀔 수 있기 때문이다
			
	스트림의 종류(상대방의 종류)
		1. 타켓 스트림(기본 스트림)
			--> 외부장치에 직접 연결되는 스트림
			
		2. 필터 스트림(보조 스트림)
			--> 스트림의 성능향상, 개발자 편의를 위해서
				스트림에 연결되는 스트림
		
		참고
			반드시 기본 스트림은 존재해야 하고
			필요에 따라서 필터 스트림을 연결해서 사용해야 한다.

-----------------------------------------------------------------------------------
byte 단위 Stream
	1. InputStream
		
		기본 함수
			
			int read()
			--> 오직 한 문자(1byte)만 읽어들이는 함수
				반환값 - 읽은 문자
				
			int read(byte[] b)
			--> 여러 바이트를 읽어들이는 함수
				읽은 결과는 byte[] b 기억하게 되고
				반환값 - 읽은 데이터 갯수(바이트 수)
				
			int read(byte[] b, int off, int len)
			--> 여러 바이트를 읽어들이는 함수
				이때 배열의 지정한 위치부터 지정한 개수만큼만 읽어준다.
				반환값 - 읽은 데이터 갯수(바이트 수)
				
	2. FileInputStream
		--> 파일에 연결되는 입력용 스트림
		
			생성방법
				FileInputStream(String name)
				--> 스트림을 연결할 파일의 이름을 이용해서 스트림을 연결한다.
				
	3. FileOutputStream
		--> 파일로 연결된 보내는 방향의 스트림
		
	4. OutputStream
		--> 내보내는 방향의 타켓스트림(기본스트림)
		
		기본함수
			void write(int b)
			--> 한 글자만 내보내는 함수
			
			void write(byte[] b)
			--> 여러글자를 내보내는 함수
			
			void write(byte[] b, int off, int len)
			--> 여러글자 중 지정한 부분만 내보내는 함수
				int off - 내보낼 시작 위치
				int len - 내보낼 데이터 갯수
				
-----------------------------------------------------------------------------------
File
--> 이것은 스트림이 아니다.
	(데이터를 입력, 출력하는 기능이 없다.)
	다만 우리가 외부 장치 중에서 가장 많이 사용하는 외부장치가 파일이다보니
	그 파일에 대한 정보를 처리하기 위한 클래스
	
	생성방법
		File(String pathname)				
		--> 파일의 경로와 이름을 지정해서 만든다.
		
		File(String parent, String child)
		--> 파일의 경로(parent)와 이름(child)을 따로 지정해서 만든다.
		
			참고
				자바에서의 파일은 폴더 자체만도 파일로 인정한다.
				
				예
					File f = new File("c:\\");
					
		File(URI uri)
		--> 네트워크에서 다른 시스템에 있는 파일의 정보를 만든다.
		
	참고 함수
		1. 정보를 알아내는 함수
			getName()		- 파일의 이름만 알아내는 함수
			getParent()		- 폴더이름만 알아내는 함수
			exists()		- 파일의 존재 여부를 알아내는 함수
			length()		- 파일의 크기를 알아내는 함수
			...
			
		2. 외부적인 작업을 하기 위한 함수
			--> 데이터 입출력 이외에 파일 전체에 대해서 필요한 작업을 할 수 있는 함수들...
						
			delete()		- 파일 삭제
			mkdir()			- 폴더 생성(하나만 만들 수 있다.)
			mkdirs()		- 폴더 생성(계층으로 만들 수 있다.)
						==> c:\class\java\ex\test01
			rename()		- 파일이름 변경
			list()			- 폴더에 있는 파일의 목록을 반환해주는 함수
			...		
			
		참고
			String[] list()		- 이름만 알아낸다.
			File[] listFiles() 	- 정보까지 알아낸다.
			--> 일반적인 파일의 목록을 알아낸다
			
			String[] list(FilenameFilter filter)
			File[] listFiles(FileFilter filter)
			File[] listFiles(FilenameFilter filter)
			--> 필터링을 해서 리스트를 구할 수 있다.
				즉, 내가 필요한 파일만 골라서 목록을 반환 받을 수 있다.

---------------------------------------------------------------------------------
필터스트림
--> 1. 기본 스트림에 기능을 추가한다던지
	2. 사용자의 편의를 제공하기 위한
	보조적인 기능을 하는 스트림이다.
	
	주의 
		반드시 기본 스트림은 존재해야 하고
		필터스트림은 필요에 따라서 연결해서 사용하면 된다.
		
	참고
		필터 스트림 역시 방향성을 가지고 있으며
		반드시 같은 방향끼리만 연결해야 한다.
		
	***
	1. BufferedInputStream / BufferedOutputStream
		--> 사용자 편의 기능은 없고
			스트림의 성능을 향상시키는 역할을 한다.
			버퍼에 데이터를 모았다가 한번에 처리하는 기능이 추가된 스트림이다.
			
		*****
		주요함수
			flush()
			--> 강제로 버퍼를 비우는 함수
			
	2. DataInputStream /  DataOutputStream
		--> 많이 사용하는 스트림은 아니다.
			기능향상은 없고
			
			보통 스트림은 반드시 byte[]로만 데이터를 처리한다.
			문자 데이터가 아닌 다른 형태의 데이터는
			문제가 있을 수 있다.
			--> 자바의 데이터형을 byte[] 변환하지 않고
				직접 외부장치로 입력하는 기능을 추가한 것
				
			잘 사용하지 않는 이유
				DataOutputStream을 이용한 경우는 반드시 DataInputStream 으로 받아야 한다.
				순서가 지켜져야 한다.
				(저장할 때 int, float --> 받을 때도 int, float의 순서대로 받아야 한다. )
				
	3. PrintStream
		--> 필터계열 스트림
			사용자 편의성 + 기능향상 을 동시에 만들어 놓은 보조 스트림
			
			기능
				1. 내부적으로 Buffered와 연결해 놓았다.
				2. 사용자 편의를 위해서 자바의 데이터형태를 그대로 출력하도록 해 놓았다.
				3. 파일과 직접 연결하도록 해 놓았다.
					(이 경우 내부적으로 기본 스트림을 자신이 준비해서 연결해서 사용한다.)
					
			단점
				한쌍을 이루는 입력쪽 스트림이 없다.
				
--------------------------------------------------------------------------------------------

char 단위의 스트림
--> 한번 입출력할 때 2바이트 단위로 입출력할 수 있는 스트림
	
	주의
		기계어 상태의 내용은 절대로 char 단위 입출력을 사용하면 안된다.
		이것은 오직 텍스트 문서에 한해서만 사용해야 한다.
		
		기계어 문서는 반드시 byte 단위의 입출력을 사용해야 한다.
		왜???
		2byte가 1char 가 될때 바이트의 순서가 섞일 수 있다.
		
			예
				가	ㄱ - 0011	ㅏ - 0101 이라고 가정하면
				
				두개의 비트를 합쳤을 때
					
						00110101	이라고 예상하겠지만
						
						01010011	로 순서가 바뀐상태로 처리된다.				
				
	1. FileWriter / FileReader
		--> 파일에 직접 연결된 타겟 스트림이다.
			단위는 char 단위가 된다.
			
		내부적으로 char 단위로 처리한다는 것만 변경되었을 뿐
		사용자 입장에서는 byte 단위로 사용하는 것과 별 차이가 없이 사용하면 된다.
		
	2. 관련된 필터 스트림
		
		1) BufferedReader / BufferedWriter
			--> 중간에 버퍼 기능을 추가해서 스트림의 성능 향상을 위한 보조 스트림
			
			참고
				가장 핵심적인 함수
				--> char 단위의 기본 함수에는 문자열을 읽을 수 있는 함수가 없다.
				
				readLine()	==> 한줄 단위로 문자열을 그대로 읽어서 사용 할수 있는 함수
				
				참고
					이 함수를 사용할 때 주의사항
					--> 줄 단위로 한줄씩 읽는 함수이다.
						(이 말은 줄 단위(\r\n)를 발견하면 그곳에서 읽는 것을 멈춘다.)
						
						참고 필요하면 줄단위를 강제로 입력해줘야 한다.
						이 함수는 줄바꿈기호를 삭제하는 결과가 발생한다.
		
		2) PrintWriter
			--> 위의 PrintStream 처럼 필터계열의 스트림
				1. 버퍼의 기능을 가지고 있다.
				2. 직접 파일에 연결 할 수 있다.
				3. 사용자 편의를 도모한다.
					(자바의 데이터 타입을 그대로 출력한다.)
				4. 다른 byte[]의 스트림과도 연결할 수 있다.
				
	참고
		스트림을 연결할 때 주의사항
			1. 반드시 같은 방향 끼리만 연결할 수 있다.
			
				장치 ---- 기본스트림(Input) ---- 보조스트림(Input)	: O
				장치 ---- 기본스트림(Input) ---- 보조스트림(Output)	: X
				
			2. 반드시 같은 크기만 연결할 수 있다.
				장치 ---- 기본스트림(InputSream) byte기반 ---- 보조스트림(BufferedReader) char기반	: X
				
				예
					FileInputStream fin = new FileINputStream("???");
					BufferedReader br = new BufferedReader(fin);
					--> 저래로 안된다. 크기가 다르기 때문에...
	
	참고 스트리
		InputStreamReader / OutputStreamWriter
		--> 크기가 다른 두개의 스트림을 연결할 때 사용하는 보조스트림의 일종
		
			예
				FileInputStream fin = new FileInputStream("?????");// 바이트기반 기본스트림(타켓스트림)
				InputStreamReader tmp = new InpurStreamReader(fin);
				bufferedReader br = new BufferedReader(tmp);// 문자기반 보조스트림(필터스트림)
	
		***
		참고	
			타켓이 char 기반이고 필터가 byte 기반이면 연결이 되지 않는다.
			반드시
				타켓이 byte 기반이고 필터가 char 기반인 경우만 연결 할 수 있다.
				
-------------------------------------------------------------------------------------------

객체의 직렬화
--> 데이터는 자바의 기본형 이외에도 클래스 전체를 데이터로
	상대방(외부장치)와 입출력할 수 있다.
	--> 이때 함수는 제외되고
		그 클래스안에 있는 변수의 내용만 입출력이 된다.
		
		이처럼 클래스가 다른 장치에 전달되는 상태를
		전문용어로 "직렬화"라고 표현한다.
		
	찬고
		직렬화라고 부르는 이유
			클래스에 있는 변수의 내용이 순서대로 입출력된다.
			라는 의미에서 붙여진 이름이다.
	
	***
	주의사항
		아무 클래스나 입출력되는 것은 아니고
		그 클래스가 반드시 직렬화 가능 클래스여야 한다.
		직렬화 가능 클래스는
		Seializable 을 상속 받은 클래스를 이야기 한다.
		
	주의
		직렬화는 변수의 내용만 입출력되므로
		네트워크처럼 서로 떨어진 환경에서는
		양쪽에 동일한 클래스가 존재해야 한다.
		(왜냐하면 클래스 구조는 전달이 되지 않고
			변수 내용만 전달되기 때문에 양쪽 모두 클래스의 구조는 가지고 있어야 한다.)	
		이때 양쪽에 있는 클래스는
			클래스이름 + 패키지이름
		까지 모두 동일해야 한다.
		
		이때 사용하는 보조스트림
			
			ObjectInputStream / ObjectOutputStream
			--> 이것은 주로 네트워크에서 많이 사용하므로
				Reader/Writer 계열은 없다.
---------------------------------------------------------------------------------------------

							
				
	
	
			
				
				
				
				
				
				
			
				
				
				
				
				
				
				